{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","heroUrl","hero","name","replace","class","href","localized_name","roles","join","alt","src","primary_attr","attack_type","CardList","className","heroes","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","this","filteredHeroes","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6UAGaA,G,YAAO,SAAAC,GAClB,IAAMC,EAAO,oCAAgCD,EAAME,KAAKC,KAAKC,QAAQ,iBAAkB,KAEvF,OACE,yBAAKC,MAAM,QACT,yBAAKA,MAAM,SAAQ,uBAAGC,KAAML,GAAUD,EAAME,KAAKK,iBACjD,yBAAKF,MAAM,SAASL,EAAME,KAAKM,MAAMC,KAAM,OAC3C,yBAAKJ,MAAM,cACT,uBAAGC,KAAML,GACP,yBACES,IAAKV,EAAME,KAAKK,eAChBI,IAAG,wDAAmDX,EAAME,KAAKC,KAAKC,QAAQ,iBAAkB,IAA7F,eAKT,yBAAKC,MAAM,OACT,yBAAKA,MAAM,aACH,yBACIK,IAAKV,EAAME,KAAKU,aAChBD,IAAG,wEAAmEX,EAAME,KAAKU,aAA9E,UAEP,8BAAOZ,EAAME,KAAKW,kBCrBrBC,EAAW,SAAAd,GACtB,OACE,yBAAKe,UAAU,aACZf,EAAMgB,OAAOC,KAAI,SAAAf,GAAI,OACpB,kBAAC,EAAD,CAAMA,KAAMA,SCLPgB,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACvB,2BACEL,UAAU,SACVM,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCoCCG,G,kBAtCb,aAAe,IAAD,8BACZ,+CAcFH,aAAe,SAAAI,GACb,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAbtC,EAAKC,MAAQ,CACXb,OAAQ,GACRU,YAAa,IALH,E,iFASO,IAAD,OAClBI,MAAM,uCACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAf,GAAM,OAAI,EAAKS,SAAS,CAAET,OAAQA,S,+BAOlC,IAAD,EACyBkB,KAAKL,MAA7Bb,EADD,EACCA,OAAQU,EADT,EACSA,YACVS,EAAiBnB,EAAOoB,QAAO,SAAAlC,GAAI,OACvCA,EAAKK,eAAe8B,cAAcC,SAASZ,EAAYW,kBAGzD,OACE,yBAAKtB,UAAU,OACb,gDACA,kBAAC,EAAD,CACEI,YAAY,gBACZC,aAAcc,KAAKd,eAErB,kBAAC,EAAD,CAAUJ,OAAQmB,S,GAjCRI,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,MAAK,SAAAqB,GACjCA,EAAaC,kB","file":"static/js/main.f23e3696.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './card.styles.css';\r\n\r\nexport const Card = props => {\r\n  const heroUrl = `http://www.dota2.com/hero/${props.hero.name.replace('npc_dota_hero_', \"\")}`;\r\n\r\n  return (\r\n    <div class=\"card\">\r\n      <div class=\"title\"><a href={heroUrl}>{props.hero.localized_name}</a></div>\r\n      <div class=\"roles\">{props.hero.roles.join (', ')}</div>\r\n      <div class=\"hero-image\">\r\n        <a href={heroUrl}>\r\n          <img \r\n            alt={props.hero.localized_name}\r\n            src={`http://cdn.dota2.com/apps/dota2/images/heroes/${props.hero.name.replace('npc_dota_hero_', \"\")}_lg.png`} \r\n          />\r\n        </a>\r\n      </div>\r\n\r\n      <div class=\"cta\">\r\n        <div class=\"hero-info\">\r\n                <img \r\n                    alt={props.hero.primary_attr}\r\n                    src={`http://cdn.dota2.com/apps/dota2/images/heropedia/overviewicon_${props.hero.primary_attr}.png`}\r\n                />\r\n                <span>{props.hero.attack_type}</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"./card-list.styles.css\";\r\nimport { Card } from '../card/card.component';\r\n\r\nexport const CardList = props => {\r\n  return (\r\n    <div className=\"card-list\">\r\n      {props.heroes.map(hero => (\r\n        <Card hero={hero} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"./search-box.styles.css\";\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => (\r\n  <input\r\n    className=\"search\"\r\n    type=\"search\"\r\n    placeholder={placeholder}\r\n    onChange={handleChange}\r\n  />\r\n);\r\n","import React, { Component } from \"react\";\nimport { CardList } from \"./components/card-list/card-list.component\";\nimport { SearchBox } from \"./components/search-box/search-box.component\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      heroes: [],\n      searchField: \"\"\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://api.opendota.com/api/heroes\")\n      .then(response => response.json())\n      .then(heroes => this.setState({ heroes: heroes }));\n  }\n\n  handleChange = e => {\n    this.setState({ searchField: e.target.value });\n  };\n\n  render() {\n    const { heroes, searchField } = this.state;\n    const filteredHeroes = heroes.filter(hero =>\n      hero.localized_name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n    return (\n      <div className=\"App\">\n        <h1>DOTA 2 HERO LIST</h1>\n        <SearchBox\n          placeholder=\"Search heroes\"\n          handleChange={this.handleChange}\n        />\n        <CardList heroes={filteredHeroes} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}